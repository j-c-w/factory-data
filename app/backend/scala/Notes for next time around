Options are a really good idea

Use double options almost everywhere

Be careful with addition within a monad -- should 7 + NoInteger return 7 or NoInteger?

Aggregating is difficult -- average after summing

Don't use this pointless ResultListObject, just pass the LineListObject around

Store date as month #, day #, year #, not as a java.util.date -- makes it impossible to
sort after an aggregate

Stay away from complex types (i.e. date). Anything that cannot be compared to a string is going to be nearly
impossible to deal with on the frontend.

Use the actual monad functions. Defining these wrappers is a great idea, but the definition of methods
within the wrappers is poorly done. It could be improved upon with the introduction of
map & flatmap methods. i.e.
def + (Other: IntegerOption) = (this, other) match {
    case (SomeInteger(x), SomeInteger(y)) => SomeInteger(x + Y)
    case (_, _) => NoInteger
}

could be improved to

def + (other: IntegerOption) = {
    this map (x => (other.map(y => x + y)))
}